<?
  include_once ("../../../../lib/inc.php");

  // identity check

  if (!simpleauth ($mysql, $_REQUEST["id"], $_REQUEST["auth"]))
  {
    $apireturn["status"]["success"] = "false";
    $apireturn["status"]["error"] = "Authentication failed";
  }
  else if (!postcheck ($_REQUEST, ["wid", "aid", "set", "cover", "performers"]))
  {
    $apireturn["status"]["success"] = "false";
    $apireturn["status"]["error"] = "Missing fields";
  }
  else
  {
    // inserting the recording into the recording abstract database

    insertrecording ($_REQUEST);

    // recording edited is recording verified

    $update = Array 
    (
      "verified" => 1
    );

    $where = Array 
    (
      "work_id" => $_REQUEST["wid"],
      "spotify_albumid" => $_REQUEST["aid"],
      "subset" => (String) $_REQUEST["set"]
    );

    if ($_REQUEST["observation"]) $update["observation"] = $_REQUEST["observationvalue"];

    $op = mysqlupdate ($mysql, "recording", $update, $where);

    if ($_REQUEST["newperformers"])
    {
      // deleting performers

      mysqli_query ($mysql, "delete from recording_performer where work_id={$_REQUEST["wid"]} and spotify_albumid='{$_REQUEST["aid"]}' and subset={$_REQUEST["set"]}");

      // inserting performers

      foreach (explode (PHP_EOL, $_REQUEST["newperformers"]) as $performer)
      {
        $inperformers = ["performer" => explode (",", $performer)[0], "role" => ucfirst (trim (explode (",", $performer)[1]))];

        if ($inperformers["role"] == "")
        {
          $performerstoguess[] = $inperformers["performer"];
        }
        else
        {
          $inss[] = array_merge (["work_id" => $_REQUEST["wid"], "spotify_albumid" => $_REQUEST["aid"], "subset" => (String) $_REQUEST["set"]], $inperformers);
        }
      }

      if (sizeof ($performerstoguess))
      {
        $perfs = openopusdownparse ("dyn/performer/list/", ["names"=>json_encode ($performerstoguess)]);
        $rldb = $perfs["performers"]["digest"];

        foreach ($performerstoguess as $pftog)
        {
          $inss[] = ["work_id" => $_REQUEST["wid"], "spotify_albumid" => $_REQUEST["aid"], "subset" => (String) $_REQUEST["set"], "performer" => $pftog, "role" => $rldb[slug ($pftog)]];
        }
      }

      mysqlmultinsert ($mysql, "recording_performer", $inss);
    }
    
    /* to-do
    if ($_REQUEST["tracks"])
    {
      // deleting tracks

      mysqli_query ($mysql, "delete from track where recording_id={$_REQUEST["rid"]}");

      // inserting tracks

      foreach (json_decode ($_REQUEST["tracks"], true) as $track)
      {
        $intracks[] = $track;
        $insst = array_merge (["recording_id" => $_REQUEST["rid"]], end ($intracks));
        mysqlinsert ($mysql, "track", $insst);
      }
    }
    */

    $apireturn["status"]["success"] = "true";
    $apireturn["work"]["id"] = $_REQUEST["wid"];
    $apireturn["recording"] = ["spotify_albumid" => $_REQUEST["aid"], "subset" => (String) $_REQUEST["set"]];
    if ($_REQUEST["observation"]) $apireturn["recording"]["observation"] = $_REQUEST["observationvalue"];
    if ($_REQUEST["performers"]) $apireturn["recording"]["performers"] = arrayrenamekey (arraykeep ($inss, ["performer", "role"]), "performer", "name");
    if ($_REQUEST["tracks"]) $apireturn["recording"]["tracks"] = $intracks;      
    $apireturn["user"]["id"] = $_REQUEST["id"];

    shell_exec ("rm -rf ". WEBDIR. "/recording/list/work/{$_REQUEST["wid"]}/");
    shell_exec ("rm ". WEBDIR. "/recording/detail/work/{$_REQUEST["wid"]}/album/{$_REQUEST["aid"]}/{$_REQUEST["set"]}.json");
  }

  echo apireturn ($apireturn);
