<?
  include_once ("../../../lib/inc.php");

  // try to find the recording

  $recordings = mysqlfetch ($mysql, "select concat(recording.work_id,'-',recording.spotify_albumid,'-',recording.subset) as id, recording.observation as observation, recording.subset, recording.verified, recording.spotify_albumid, recording.work_id as work, spotify_imgurl as cover, performer, role from recording, recording_performer, playlist_recording where playlist_id = '{$_REQUEST["id"]}' and recording_performer.work_id = recording.work_id and recording_performer.subset = recording.subset and recording_performer.spotify_albumid = recording.spotify_albumid and playlist_recording.work_id = recording.work_id and playlist_recording.subset = recording.subset and playlist_recording.spotify_albumid = recording.spotify_albumid order by position desc, work asc, recording.spotify_albumid asc, recording.subset asc");

  if (!$recordings)
  {
    // if the recording doesn't exist, return an error

    $apireturn["status"] = Array ("success"=>"false", "error"=>"No recordings found");
  }
  else
  {
    // playlist details

    $query = "select playlist.id as id, playlist.name as name, user.name as owner, user.id as owner_id from playlist, user where user_id=user.id and playlist.id = '{$_REQUEST["id"]}'";
    $playlist = mysqlfetch ($mysql, $query);
    $apireturn["playlist"] = Array 
      (
        "id" => $playlist[0]["id"],
        "name" => $playlist[0]["name"],
        "owner" => Array 
          (
            "id" => $playlist[0]["owner_id"],
            "name" => $playlist[0]["owner"]
          )
      );

    // recordings

    // open opus api call

    foreach ($recordings as $rec)
    {
      $worklist[] = $rec["work"];
    }

    $id = -1;

    $obworks = openopusdownparse ("work/list/{$_REQUEST["cid"]}/ids/". implode (",", array_unique ($worklist)). ".json");

    foreach ($recordings as $rec)
    {
      if ($lastid != $rec["id"])
      {
        $id = $id + 1;
        $vid = slug ($obworks["works"]["w:". $rec["work"]]["composer"]["name"]. "-". $obworks["works"]["w:". $rec["work"]]["title"]. "-". $id);
        $apireturn["recordings"][$vid] = Array
          (
            "spotify_albumid" => $rec["spotify_albumid"],
            "set" => (String) $rec["subset"],
            "cover" => $rec["cover"],
            "observation" => $rec["observation"],
            "verified" => $rec["verified"]
          );
      }

      $apireturn["recordings"][$vid]["performers"][] = Array ("name"=>$rec["performer"],"role"=>$rec["role"]);
      $apireturn["recordings"][$vid]["work"] = Array
        (
          "composer"=>Array
            (
              "id"=>$obworks["works"]["w:". $rec["work"]]["composer"]["id"],
              "name"=>$obworks["works"]["w:". $rec["work"]]["composer"]["name"],
              "epoch"=>$obworks["works"]["w:". $rec["work"]]["composer"]["epoch"]
            ),
           "id"=>$rec["work"],
           "title"=>$obworks["works"]["w:". $rec["work"]]["title"],
           "genre"=>$obworks["works"]["w:". $rec["work"]]["genre"],
        );

      $lastid = $rec["id"];
    }

    $apirecordings = $apireturn["recordings"];

    foreach ($apirecordings as $apid => $apirec)
    {
      $apirecordings[$apid]["performers"] = orderperformers ($apirec["performers"]);
      $apirecordings[$apid]["recording_id"] = "wkid-". $apirec["work"]["id"]. "-". $apirec["apple_albumid"] . "-". slug(implode ("-", arraykeepvalues ($apirecordings[$apid]["performers"], ["name"])));
    }
    
    ksort ($apirecordings);
    $apireturn["recordings"] = array_values ($apirecordings);
  }

  if (isset ($apireturn["recordings"]))
  {
    $apireturn["status"]["rows"] = sizeof ($apireturn["recordings"]);
    $apireturn["works"] = $obworks["abstract"];
  }

  echo savecache ("/recording/list/playlist/{$_REQUEST["id"]}.json", apireturn ($apireturn));
